/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.mainframe;

import java.awt.Color;
import java.io.FileInputStream;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import net.proteanit.sql.DbUtils;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.DataFormatter;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.mainframe.common.bean.CourseBean;
import org.mainframe.common.bean.CourseSectionBean;
import org.mainframe.common.bean.DegreePlanBean;
import org.mainframe.common.bean.FacultyBean;
import org.mainframe.common.bean.RoomBean;
import org.mainframe.common.bean.SchoolBean;
import org.mainframe.common.bean.SemesterBean;
import org.mainframe.common.bean.StudentBean;
import org.mainframe.common.bean.StudentCourseBean;
import org.mainframe.common.bean.UserBean;
import org.mainframe.common.model.CourseModel;
import org.mainframe.common.model.CourseSectionModel;
import org.mainframe.common.model.DBUtil;
import org.mainframe.common.model.DegreePlanModel;
import org.mainframe.common.model.FacultyModel;
import org.mainframe.common.model.GradSchoolModel;
import org.mainframe.common.model.RoomModel;
import org.mainframe.common.model.SemesterModel;
import org.mainframe.common.model.StudentModel;
import org.mainframe.common.model.UserModel;

/**
 *
 * @author V
 */
public class MainFrame extends javax.swing.JFrame {

    /**
     * Creates new form MainFrame
     */
    public MainFrame() {
        initComponents();
       
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainPanel = new javax.swing.JDesktopPane();
        jMenuBar1 = new javax.swing.JMenuBar();
        importData = new javax.swing.JMenu();
        importSchoolData = new javax.swing.JMenuItem();
        facultyImportMenuItem = new javax.swing.JCheckBoxMenuItem();
        importCourseMenuItem = new javax.swing.JCheckBoxMenuItem();
        importcourseSectionMenuItem = new javax.swing.JCheckBoxMenuItem();
        importDegreePlanMenuItem = new javax.swing.JCheckBoxMenuItem();
        importStudentMenuItem = new javax.swing.JCheckBoxMenuItem();
        importStudentCourseMenuItem = new javax.swing.JCheckBoxMenuItem();
        importSemesterMenuItem = new javax.swing.JCheckBoxMenuItem();
        ImportRoomMenuItem = new javax.swing.JCheckBoxMenuItem();
        ImportUsersMenuItem = new javax.swing.JCheckBoxMenuItem();
        MaintanData = new javax.swing.JMenu();
        maintanSchool = new javax.swing.JMenuItem();
        maintainFaculty = new javax.swing.JCheckBoxMenuItem();
        maintainCourse = new javax.swing.JCheckBoxMenuItem();
        maintainCourseSection = new javax.swing.JCheckBoxMenuItem();
        maintainDegreePlan = new javax.swing.JCheckBoxMenuItem();
        maintainStudent = new javax.swing.JCheckBoxMenuItem();
        maintainStudentCourse = new javax.swing.JCheckBoxMenuItem();
        maintainSemester = new javax.swing.JCheckBoxMenuItem();
        MaintainRooms = new javax.swing.JCheckBoxMenuItem();
        MaintainUsers = new javax.swing.JCheckBoxMenuItem();
        ScheduleMenu = new javax.swing.JMenu();
        GenerateSchedule = new javax.swing.JMenuItem();
        TestSchedule = new javax.swing.JCheckBoxMenuItem();
        ReportsMenu = new javax.swing.JMenu();
        ScheduleReport = new javax.swing.JMenuItem();
        StudentsReport = new javax.swing.JCheckBoxMenuItem();
        LogOut = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(255, 255, 255));

        mainPanel.setBackground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 821, Short.MAX_VALUE)
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 536, Short.MAX_VALUE)
        );

        jMenuBar1.setBackground(new java.awt.Color(255, 255, 255));

        importData.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        importData.setText("Import");
        importData.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        importSchoolData.setText("GradSchool Data");
        importSchoolData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                importSchoolDataActionPerformed(evt);
            }
        });
        importData.add(importSchoolData);

        facultyImportMenuItem.setSelected(true);
        facultyImportMenuItem.setText("Faculty Data");
        facultyImportMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                facultyImportMenuItemActionPerformed(evt);
            }
        });
        importData.add(facultyImportMenuItem);

        importCourseMenuItem.setSelected(true);
        importCourseMenuItem.setText("Course Data");
        importCourseMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                importCourseMenuItemActionPerformed(evt);
            }
        });
        importData.add(importCourseMenuItem);

        importcourseSectionMenuItem.setSelected(true);
        importcourseSectionMenuItem.setText("CourseSection Data");
        importcourseSectionMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                importcourseSectionMenuItemActionPerformed(evt);
            }
        });
        importData.add(importcourseSectionMenuItem);

        importDegreePlanMenuItem.setSelected(true);
        importDegreePlanMenuItem.setText("DegreePlan Data");
        importDegreePlanMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                importDegreePlanMenuItemActionPerformed(evt);
            }
        });
        importData.add(importDegreePlanMenuItem);

        importStudentMenuItem.setSelected(true);
        importStudentMenuItem.setText("Student Data");
        importStudentMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                importStudentMenuItemActionPerformed(evt);
            }
        });
        importData.add(importStudentMenuItem);

        importStudentCourseMenuItem.setSelected(true);
        importStudentCourseMenuItem.setText("StudentCourse Data");
        importStudentCourseMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                importStudentCourseMenuItemActionPerformed(evt);
            }
        });
        importData.add(importStudentCourseMenuItem);

        importSemesterMenuItem.setSelected(true);
        importSemesterMenuItem.setText("Semester Data");
        importSemesterMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                importSemesterMenuItemActionPerformed(evt);
            }
        });
        importData.add(importSemesterMenuItem);

        ImportRoomMenuItem.setSelected(true);
        ImportRoomMenuItem.setText("Rooms Data");
        ImportRoomMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ImportRoomMenuItemActionPerformed(evt);
            }
        });
        importData.add(ImportRoomMenuItem);

        ImportUsersMenuItem.setSelected(true);
        ImportUsersMenuItem.setText("Users Data");
        ImportUsersMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ImportUsersMenuItemActionPerformed(evt);
            }
        });
        importData.add(ImportUsersMenuItem);

        jMenuBar1.add(importData);

        MaintanData.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        MaintanData.setText("Maintain");
        MaintanData.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        maintanSchool.setText("GradSchool ");
        maintanSchool.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                maintanSchoolActionPerformed(evt);
            }
        });
        MaintanData.add(maintanSchool);

        maintainFaculty.setSelected(true);
        maintainFaculty.setText("Faculty");
        maintainFaculty.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                maintainFacultyActionPerformed(evt);
            }
        });
        MaintanData.add(maintainFaculty);

        maintainCourse.setSelected(true);
        maintainCourse.setText("Course");
        maintainCourse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                maintainCourseActionPerformed(evt);
            }
        });
        MaintanData.add(maintainCourse);

        maintainCourseSection.setSelected(true);
        maintainCourseSection.setText("CourseSection");
        maintainCourseSection.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                maintainCourseSectionActionPerformed(evt);
            }
        });
        MaintanData.add(maintainCourseSection);

        maintainDegreePlan.setSelected(true);
        maintainDegreePlan.setText("DegreePlan");
        maintainDegreePlan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                maintainDegreePlanActionPerformed(evt);
            }
        });
        MaintanData.add(maintainDegreePlan);

        maintainStudent.setSelected(true);
        maintainStudent.setText("Student");
        maintainStudent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                maintainStudentActionPerformed(evt);
            }
        });
        MaintanData.add(maintainStudent);

        maintainStudentCourse.setSelected(true);
        maintainStudentCourse.setText("StudentCourse");
        maintainStudentCourse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                maintainStudentCourseActionPerformed(evt);
            }
        });
        MaintanData.add(maintainStudentCourse);

        maintainSemester.setSelected(true);
        maintainSemester.setText("Semester");
        maintainSemester.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                maintainSemesterActionPerformed(evt);
            }
        });
        MaintanData.add(maintainSemester);

        MaintainRooms.setSelected(true);
        MaintainRooms.setText("Rooms ");
        MaintainRooms.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MaintainRoomsActionPerformed(evt);
            }
        });
        MaintanData.add(MaintainRooms);

        MaintainUsers.setSelected(true);
        MaintainUsers.setText("Users");
        MaintainUsers.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MaintainUsersActionPerformed(evt);
            }
        });
        MaintanData.add(MaintainUsers);

        jMenuBar1.add(MaintanData);

        ScheduleMenu.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        ScheduleMenu.setText("Schedule");
        ScheduleMenu.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        GenerateSchedule.setText("Generate Schedule");
        GenerateSchedule.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GenerateScheduleActionPerformed(evt);
            }
        });
        ScheduleMenu.add(GenerateSchedule);

        TestSchedule.setSelected(true);
        TestSchedule.setText("TestSchedule");
        TestSchedule.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TestScheduleActionPerformed(evt);
            }
        });
        ScheduleMenu.add(TestSchedule);

        jMenuBar1.add(ScheduleMenu);

        ReportsMenu.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        ReportsMenu.setText("Reports");
        ReportsMenu.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        ScheduleReport.setText("Schedule Report");
        ScheduleReport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ScheduleReportActionPerformed(evt);
            }
        });
        ReportsMenu.add(ScheduleReport);

        StudentsReport.setSelected(true);
        StudentsReport.setText("Students Report");
        StudentsReport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                StudentsReportActionPerformed(evt);
            }
        });
        ReportsMenu.add(StudentsReport);

        jMenuBar1.add(ReportsMenu);

        LogOut.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        LogOut.setText("Logout");
        LogOut.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        LogOut.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                LogOutMouseClicked(evt);
            }
        });
        jMenuBar1.add(LogOut);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainPanel)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainPanel)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void importSchoolDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_importSchoolDataActionPerformed
      // TODO add your handling code here:
        JFileChooser jf = new JFileChooser();
        jf.setDialogTitle("Please select GradSchool file to import");
        int result = jf.showOpenDialog(null);
        if(result == JFileChooser.APPROVE_OPTION){
            String filePath = jf.getSelectedFile().getAbsolutePath();
            
            
            try{
                FileInputStream fis = new FileInputStream(filePath);
                Workbook workbook = new XSSFWorkbook(fis);
                Sheet firstSheet = workbook.getSheetAt(0);
                Iterator<Row> iterator = firstSheet.iterator();
                List<SchoolBean> schoolBeanList = new ArrayList<SchoolBean>();
                
                while (iterator.hasNext()) {
        Row nextRow = iterator.next();
        if(nextRow.getRowNum() != 0){
        Iterator<Cell> cellIterator = nextRow.cellIterator();
                    SchoolBean school = new SchoolBean();
 
        while (cellIterator.hasNext()) {
            Cell nextCell = cellIterator.next();
            int columnIndex = nextCell.getColumnIndex();
 
            switch (columnIndex) {
            case 0:
                school.setSchoolAbbrv((String) getCellValue(nextCell));
                break;
            case 1:
                school.setSchoolName((String) getCellValue(nextCell));
                break;
            
            }
 
 
        }
        schoolBeanList.add(school);
    }
 
    
                }    
    workbook.close();
    fis.close();
    
    mainPanel.removeAll();
    mainPanel.repaint();   
            GradSchoolModel model = new GradSchoolModel();         
            
            for(SchoolBean schoolBean :schoolBeanList){
                try{
                model.addSchool(schoolBean);
                }catch(Exception exp){
                    System.out.println("Exception Raised....."+exp.getMessage());
                }
            }            
         
         CommonImportFrame commonFrame = new CommonImportFrame();
         commonFrame.setTitle("GradSchools  Import Frame");
         commonFrame.getLblImportMsg().setText("GradSchools Data Imported Successfully");
         commonFrame.loadSchoolDataIntoJTable();
         mainPanel.add(commonFrame);
         commonFrame.setVisible(true);
         
          }catch(Exception exp){
                JOptionPane.showMessageDialog(null, exp.getMessage());
            }
            
            
        }
        
        
    }//GEN-LAST:event_importSchoolDataActionPerformed

    private void facultyImportMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_facultyImportMenuItemActionPerformed
        // TODO add your handling code here:
          
        JFileChooser jf = new JFileChooser();
        jf.setDialogTitle("Please select a Faculty File to import");
        int result = jf.showOpenDialog(null);
        if(result == JFileChooser.APPROVE_OPTION){
            String filePath = jf.getSelectedFile().getAbsolutePath();         
            
            try{
                FileInputStream fis = new FileInputStream(filePath);
                Workbook workbook = new XSSFWorkbook(fis);
                Sheet firstSheet = workbook.getSheetAt(0);
                Iterator<Row> iterator = firstSheet.iterator();
                List<FacultyBean> facultyBeanList = new ArrayList<FacultyBean>();
                
                while (iterator.hasNext()) {
        Row nextRow = iterator.next();
        if(nextRow.getRowNum() != 0){
        Iterator<Cell> cellIterator = nextRow.cellIterator();
                    FacultyBean faculty = new FacultyBean();
 
        while (cellIterator.hasNext()) {
            Cell nextCell = cellIterator.next();
            int columnIndex = nextCell.getColumnIndex();
 
            switch (columnIndex) {
            case 0:
                faculty.setLastName((String) getCellValue(nextCell));
                break;
            case 1:
                faculty.setFirstName((String) getCellValue(nextCell));
                break;
            case 2:
                faculty.setGradSchool((String) getCellValue(nextCell));
                break;
            case 3:
                faculty.setDegree((String) getCellValue(nextCell));
                break;
            case 4:
                faculty.setTitle((String) getCellValue(nextCell));
                break;  
            case 5:
                faculty.setDaysToTeach( getCellValue(nextCell).toString());
                break;
            case 6:
                faculty.setMaxLoadFall(Double.valueOf(getCellValue(nextCell).toString()));
                break;
            case 7:
                faculty.setMaxLoadSpring(Double.valueOf(getCellValue(nextCell).toString()));
                break;
            case 8:
                faculty.setMaxLoadSummer(Double.valueOf(getCellValue(nextCell).toString()));
                break;
            }
 
 
        }
        facultyBeanList.add(faculty);
    }
 
    
                }    
    workbook.close();
    fis.close();
    
    mainPanel.removeAll();
    mainPanel.repaint();   
                FacultyModel model = new FacultyModel();
                
                for(FacultyBean facultyBean :facultyBeanList){
                try{
                model.addFaculty(facultyBean);
                }catch(Exception exp){
                    System.out.println("Exception Raised....."+exp.getMessage());
                }
            }            
         CommonImportFrame commonFrame = new CommonImportFrame();
         commonFrame.setTitle("Faculty Import Frame");
         commonFrame.getLblImportMsg().setText("Faculty Data Imported Successfully");
         commonFrame.loadFacultyDataIntoJTable();
         mainPanel.add(commonFrame);
         commonFrame.setVisible(true);
         
            }catch(Exception exp){
                JOptionPane.showMessageDialog(null, exp.getMessage());
            }
            
            
        }
    }//GEN-LAST:event_facultyImportMenuItemActionPerformed

    private void importCourseMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_importCourseMenuItemActionPerformed
        // TODO add your handling code here:
        JFileChooser jf = new JFileChooser();
        jf.setDialogTitle("Please select Courses File to import");
        int result = jf.showOpenDialog(null);
        if(result == JFileChooser.APPROVE_OPTION){
            String filePath = jf.getSelectedFile().getAbsolutePath();         
            
            try{
                FileInputStream fis = new FileInputStream(filePath);
                Workbook workbook = new XSSFWorkbook(fis);
                Sheet firstSheet = workbook.getSheetAt(0);
                Iterator<Row> iterator = firstSheet.iterator();
                List<CourseBean> courseBeanList = new ArrayList<CourseBean>();
                
                while (iterator.hasNext()) {
        Row nextRow = iterator.next();
        if(nextRow.getRowNum() != 0){
        Iterator<Cell> cellIterator = nextRow.cellIterator();
                    CourseBean courseBean = new CourseBean();
 
        while (cellIterator.hasNext()) {
            Cell nextCell = cellIterator.next();
            int columnIndex = nextCell.getColumnIndex();
 
            switch (columnIndex) {
            case 0:
                courseBean.setCourseCode((String) getCellValue(nextCell));
                break;
            case 1:
                courseBean.setCourseName((String) getCellValue(nextCell));
                break;
            case 2:
                courseBean.setCourseDesc((String) getCellValue(nextCell));
                break;
            case 3:
                courseBean.setCourseHours(Double.valueOf(getCellValue(nextCell).toString()));
                break;
            case 4:
                courseBean.setCourseCap(Double.valueOf(getCellValue(nextCell).toString()));
                break;  
            case 5:
                courseBean.setOfferedFall((String) getCellValue(nextCell));
                break;
            case 6:
                courseBean.setOfferedSpring((String)getCellValue(nextCell));
                break;
            case 7:
                courseBean.setOfferedSummer((String) getCellValue(nextCell));
                break;
            case 8:
                courseBean.setCoursePreReq((String)getCellValue(nextCell));
                break;
           case 9:
                courseBean.setTeacher((String)getCellValue(nextCell));
                break;
            }
 
 
        }
        courseBeanList.add(courseBean);
    }
 
    
                }    
    workbook.close();
    fis.close();
    
    mainPanel.removeAll();
    mainPanel.repaint();   
                CourseModel model = new CourseModel();
                for(CourseBean courseBean :courseBeanList){
                try{
                model.addCourse(courseBean);
                }catch(Exception exp){
                    System.out.println("Exception Raised....."+exp.getMessage());
                }
            }            
         CommonImportFrame commonFrame = new CommonImportFrame();
         commonFrame.setTitle("Courses Import Frame");
         commonFrame.getLblImportMsg().setText("Courses Data Imported Successfully");
         commonFrame.loadCourseDataIntoJTable();
         mainPanel.add(commonFrame);
         commonFrame.setVisible(true);
         
            }catch(Exception exp){
                JOptionPane.showMessageDialog(null, exp.getMessage());
            }          
            
        }
    }//GEN-LAST:event_importCourseMenuItemActionPerformed

    private void importcourseSectionMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_importcourseSectionMenuItemActionPerformed
         // TODO add your handling code here:
        JFileChooser jf = new JFileChooser();
        jf.setDialogTitle("Please select CourseSections File to import");
        int result = jf.showOpenDialog(null);
        if(result == JFileChooser.APPROVE_OPTION){
            String filePath = jf.getSelectedFile().getAbsolutePath();         
            
            try{
                FileInputStream fis = new FileInputStream(filePath);
                Workbook workbook = new XSSFWorkbook(fis);
                Sheet firstSheet = workbook.getSheetAt(0);
                Iterator<Row> iterator = firstSheet.iterator();
                List<CourseSectionBean> courseSectionBeansList = new ArrayList<CourseSectionBean>();
                
                while (iterator.hasNext()) {
        Row nextRow = iterator.next();
        if(nextRow.getRowNum() != 0){
        Iterator<Cell> cellIterator = nextRow.cellIterator();
                    CourseSectionBean courseSectionBean = new CourseSectionBean();
 
        while (cellIterator.hasNext()) {
            Cell nextCell = cellIterator.next();
            int columnIndex = nextCell.getColumnIndex();
 
            switch (columnIndex) {
            case 0:
               courseSectionBean.setSectionNumber(getCellValue(nextCell).toString().replace(".0", ""));
                break;
            case 1:
                courseSectionBean.setCourse((String) getCellValue(nextCell));
                break;
            case 2:
                courseSectionBean.setFaculty((String) getCellValue(nextCell));
                break;
            
                       
            }
 
 
        }
        courseSectionBeansList.add(courseSectionBean);
    }
 
    
                }    
    workbook.close();
    fis.close();
    
    mainPanel.removeAll();
    mainPanel.repaint();   
                CourseSectionModel model = new CourseSectionModel();
            for(CourseSectionBean courseSectionBean :courseSectionBeansList){
                try{
                model.addCourseSection(courseSectionBean);
                }catch(Exception exp){
                    System.out.println("Exception Raised....."+exp.getMessage());
                }
            }            
            CommonImportFrame commonFrame = new CommonImportFrame();
            commonFrame.setTitle("CourseSections Import Frame");
         commonFrame.getLblImportMsg().setText("CourseSections Data Imported Successfully");
         commonFrame.loadCourseSectionDataIntoJTable();
         mainPanel.add(commonFrame);
         commonFrame.setVisible(true);
         
            }catch(Exception exp){
                JOptionPane.showMessageDialog(null, exp.getMessage());
            }          
            
        }
    }//GEN-LAST:event_importcourseSectionMenuItemActionPerformed

    private void importDegreePlanMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_importDegreePlanMenuItemActionPerformed
             // TODO add your handling code here:
        JFileChooser jf = new JFileChooser();
        jf.setDialogTitle("Please select DegreePlans File to import");
        int result = jf.showOpenDialog(null);
        if(result == JFileChooser.APPROVE_OPTION){
            String filePath = jf.getSelectedFile().getAbsolutePath();         
            
            try{
                FileInputStream fis = new FileInputStream(filePath);
                Workbook workbook = new XSSFWorkbook(fis);
                Sheet firstSheet = workbook.getSheetAt(0);
                Iterator<Row> iterator = firstSheet.iterator();
                List<DegreePlanBean> degreePlanBeanList = new ArrayList<DegreePlanBean>();
                
                while (iterator.hasNext()) {
        Row nextRow = iterator.next();
        if(nextRow.getRowNum() != 0){
        Iterator<Cell> cellIterator = nextRow.cellIterator();
                    DegreePlanBean degreePlan = new DegreePlanBean();
 
        while (cellIterator.hasNext()) {
            Cell nextCell = cellIterator.next();
            int columnIndex = nextCell.getColumnIndex();
 
            switch (columnIndex) {
            case 0:
                degreePlan.setDegreeCode((String) getCellValue(nextCell));
                break;
            case 1:
                degreePlan.setDeptTrack((String) getCellValue(nextCell));
                break;
            case 2:
                degreePlan.setDescription((String) getCellValue(nextCell));
                break;
            case 3:
                degreePlan.setHoursReq(Double.valueOf(getCellValue(nextCell).toString()));
                break;
            case 4:
                degreePlan.setType((String) getCellValue(nextCell));
                break;  
            case 5:
                degreePlan.setCourses((String) getCellValue(nextCell));
                break;
            case 6:
                degreePlan.setGradSchool((String)getCellValue(nextCell));
                break;
            case 7:
                degreePlan.setForecast(Double.valueOf(getCellValue(nextCell).toString()));
                break;
            
            }
 
 
        }
        degreePlanBeanList.add(degreePlan);
    }
 
    
                }    
    workbook.close();
    fis.close();
    
    mainPanel.removeAll();
    mainPanel.repaint();   
                DegreePlanModel model = new DegreePlanModel();
                for(DegreePlanBean degreePlanBean :degreePlanBeanList){
                try{
                model.addDegree(degreePlanBean);
                }catch(Exception exp){
                    System.out.println("Exception Raised....."+exp.getMessage());
                }
            }            
         CommonImportFrame commonFrame = new CommonImportFrame();
         commonFrame.setTitle("DegreePlan Import Frame");
         commonFrame.getLblImportMsg().setText("DegreePlan Data Imported Successfully");
         commonFrame.loadDegreePlanDataIntoJTable();
         mainPanel.add(commonFrame);
         commonFrame.setVisible(true);
         
            }catch(Exception exp){
                JOptionPane.showMessageDialog(null, exp.getMessage());
            }          
            
        }
    }//GEN-LAST:event_importDegreePlanMenuItemActionPerformed

    private void importStudentMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_importStudentMenuItemActionPerformed
               // TODO add your handling code here:
        JFileChooser jf = new JFileChooser();
        jf.setDialogTitle("Please select Students File to import");
        int result = jf.showOpenDialog(null);
        if(result == JFileChooser.APPROVE_OPTION){
            String filePath = jf.getSelectedFile().getAbsolutePath();         
            
            try{
                FileInputStream fis = new FileInputStream(filePath);
                Workbook workbook = new XSSFWorkbook(fis);
                Sheet firstSheet = workbook.getSheetAt(0);
                Iterator<Row> iterator = firstSheet.iterator();
                List<StudentBean> studentBeansList = new ArrayList<StudentBean>();
                
                while (iterator.hasNext()) {
        Row nextRow = iterator.next();
        if(nextRow.getRowNum() != 0){
        Iterator<Cell> cellIterator = nextRow.cellIterator();
                    StudentBean studentBean = new StudentBean();
 
        while (cellIterator.hasNext()) {
            Cell nextCell = cellIterator.next();
            int columnIndex = nextCell.getColumnIndex();
 
            switch (columnIndex) {
            case 0:
                studentBean.setStudentId(getCellValue(nextCell).toString().replace(".0", ""));
                break;
            case 1:
                studentBean.setDegreeCode((String) getCellValue(nextCell));
                break;
            case 2:
                studentBean.setGraduationDate((String) getCellValue(nextCell));
                break;
            
            }
 
 
        }
        studentBeansList.add(studentBean);
    }
 
    
                }    
    workbook.close();
    fis.close();
    
    mainPanel.removeAll();
    mainPanel.repaint();   
                StudentModel model = new StudentModel();
            for(StudentBean studentBean :studentBeansList){
                try{
                model.addStudent(studentBean);
                }catch(Exception exp){
                    System.out.println("Exception Raised....."+exp.getMessage());
                }
            }            
         CommonImportFrame commonFrame = new CommonImportFrame();
         commonFrame.setTitle("Students Import Frame");
         commonFrame.getLblImportMsg().setText("Students Data Imported Successfully");
         commonFrame.loadStudentDataIntoJTable();
         mainPanel.add(commonFrame);
         commonFrame.setVisible(true);
         
            }catch(Exception exp){
                JOptionPane.showMessageDialog(null, exp.getMessage());
            }          
            
        }
    }//GEN-LAST:event_importStudentMenuItemActionPerformed

    private void importStudentCourseMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_importStudentCourseMenuItemActionPerformed
       // TODO add your handling code here:
        JFileChooser jf = new JFileChooser();
        jf.setDialogTitle("Please select StudentCourses File to import");
        int result = jf.showOpenDialog(null);
        if(result == JFileChooser.APPROVE_OPTION){
            String filePath = jf.getSelectedFile().getAbsolutePath();         
            
            try{
                FileInputStream fis = new FileInputStream(filePath);
                Workbook workbook = new XSSFWorkbook(fis);
                Sheet firstSheet = workbook.getSheetAt(0);
                Iterator<Row> iterator = firstSheet.iterator();
                List<StudentCourseBean> studentCourseBeansList = new ArrayList<StudentCourseBean>();
                
                while (iterator.hasNext()) {
        Row nextRow = iterator.next();
        if(nextRow.getRowNum() != 0){
        Iterator<Cell> cellIterator = nextRow.cellIterator();
                    StudentCourseBean studentBean = new StudentCourseBean();
 
        while (cellIterator.hasNext()) {
            Cell nextCell = cellIterator.next();
            int columnIndex = nextCell.getColumnIndex();
 
            switch (columnIndex) {
            case 0:
                studentBean.setStudentId(getCellValue(nextCell).toString().replace(".0",""));
                break;
            case 1:
                studentBean.setCourseId((String) getCellValue(nextCell));
                break;
            case 2:
                studentBean.setCourseDesc((String) getCellValue(nextCell));
                break;
            case 3:
                studentBean.setTerm((String) getCellValue(nextCell));
                break;
            case 4:
                studentBean.setGrade((String) getCellValue(nextCell));
                break;
            
            }
 
 
        }
        studentCourseBeansList.add(studentBean);
    }
 
    
                }    
    workbook.close();
    fis.close();
    
    mainPanel.removeAll();
    mainPanel.repaint();   
                StudentModel model = new StudentModel();
            for(StudentCourseBean studentBean :studentCourseBeansList){
                try{
                model.addStudentCourse(studentBean);
                }catch(Exception exp){
                    System.out.println("Exception Raised....."+exp.getMessage());
                }
            }            
            CommonImportFrame commonFrame = new CommonImportFrame();
            commonFrame.setTitle("StudentCourses Import Frame");
            commonFrame.getLblImportMsg().setText("StudentCourses Data Imported Successfully");
            commonFrame.loadStudentCourseDataIntoJTable();
            mainPanel.add(commonFrame);
            commonFrame.setVisible(true);
         
            }catch(Exception exp){
                JOptionPane.showMessageDialog(null, exp.getMessage());
            }          
            
        }
    }//GEN-LAST:event_importStudentCourseMenuItemActionPerformed

    private void importSemesterMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_importSemesterMenuItemActionPerformed
        // TODO add your handling code here:
        JFileChooser jf = new JFileChooser();
        jf.setDialogTitle("Please select Semesters File to import");
        int result = jf.showOpenDialog(null);
        if(result == JFileChooser.APPROVE_OPTION){
            String filePath = jf.getSelectedFile().getAbsolutePath();         
            
            try{
                FileInputStream fis = new FileInputStream(filePath);
                Workbook workbook = new XSSFWorkbook(fis);
                Sheet firstSheet = workbook.getSheetAt(0);
                Iterator<Row> iterator = firstSheet.iterator();
                List<SemesterBean> semesterBeansList = new ArrayList<SemesterBean>();
                
                while (iterator.hasNext()) {
        Row nextRow = iterator.next();
        if(nextRow.getRowNum() != 0){
        Iterator<Cell> cellIterator = nextRow.cellIterator();
                    SemesterBean semesterBean = new SemesterBean();
 
        while (cellIterator.hasNext()) {
            Cell nextCell = cellIterator.next();
            int columnIndex = nextCell.getColumnIndex();
 
            switch (columnIndex) {
            case 0:
                semesterBean.setSemester((String)getCellValue(nextCell));
                break;
            case 1:
                String[] stringDate = getCellValue(nextCell).toString().split("/");                
                semesterBean.setStartDate( stringDate[0]+"/"+stringDate[1]+"/20"+stringDate[2]);                
                break;
            case 2:
                String[] stringDate2 = getCellValue(nextCell).toString().split("/");                
                semesterBean.setEndDate( stringDate2[0]+"/"+stringDate2[1]+"/20"+stringDate2[2]);                
                break;
              
            
            }
 
 
        }
        semesterBeansList.add(semesterBean);
    }
 
    
                }    
    workbook.close();
    fis.close();
    
    mainPanel.removeAll();
    mainPanel.repaint();   
                SemesterModel model = new SemesterModel();
            for(SemesterBean semesterBean :semesterBeansList){
                try{
                model.addSemester(semesterBean);
                }catch(Exception exp){
                    System.out.println("Exception Raised....."+exp.getMessage());
                }
            }            
         CommonImportFrame commonFrame = new CommonImportFrame();
         commonFrame.setTitle("Semesters Import Frame");
         commonFrame.getLblImportMsg().setText("Semesters Data Imported Successfully");
         commonFrame.loadSemesterDataIntoJTable();
         mainPanel.add(commonFrame);
         commonFrame.setVisible(true);
         
            }catch(Exception exp){
                JOptionPane.showMessageDialog(null, exp.getMessage());
            }          
            
        }
    }//GEN-LAST:event_importSemesterMenuItemActionPerformed

    private void ImportRoomMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ImportRoomMenuItemActionPerformed
                // TODO add your handling code here:
         JFileChooser jf = new JFileChooser();
        jf.setDialogTitle("Please select Rooms File to import");
        int result = jf.showOpenDialog(null);
        if(result == JFileChooser.APPROVE_OPTION){
            String filePath = jf.getSelectedFile().getAbsolutePath();         
            
            try{
                FileInputStream fis = new FileInputStream(filePath);
                Workbook workbook = new XSSFWorkbook(fis);
                Sheet firstSheet = workbook.getSheetAt(0);
                Iterator<Row> iterator = firstSheet.iterator();
                List<RoomBean> roomBeansList = new ArrayList<RoomBean>();
                
                while (iterator.hasNext()) {
        Row nextRow = iterator.next();
        if(nextRow.getRowNum() != 0){
        Iterator<Cell> cellIterator = nextRow.cellIterator();
                    RoomBean roomBean = new RoomBean();
 
        while (cellIterator.hasNext()) {
            Cell nextCell = cellIterator.next();
            int columnIndex = nextCell.getColumnIndex();
 
            switch (columnIndex) {
            case 0:
                roomBean.setRoomNumber(getCellValue(nextCell).toString());
                break;
            case 1:
                roomBean.setCourseCode((String) getCellValue(nextCell));
                break;
            case 2:
                roomBean.setCapacity((String) getCellValue(nextCell));
                break;
            
            }
 
 
        }
        roomBeansList.add(roomBean);
    }
 
    
                }    
    workbook.close();
    fis.close();
    
    mainPanel.removeAll();
    mainPanel.repaint();   
                RoomModel model = new RoomModel();
            for(RoomBean roomBean :roomBeansList){
                try{
                model.addRoom(roomBean);
                }catch(Exception exp){
                    System.out.println("Exception Raised....."+exp.getMessage());
                }
            }            
         CommonImportFrame commonFrame = new CommonImportFrame();
         commonFrame.setTitle("Rooms Import Frame");
         commonFrame.getLblImportMsg().setText("Rooms Data Imported Successfully");
         commonFrame.loadRoomDataIntoJTable();
         mainPanel.add(commonFrame);
         commonFrame.setVisible(true);
         
            }catch(Exception exp){
                JOptionPane.showMessageDialog(null, exp.getMessage());
            }          
            
        }
    }//GEN-LAST:event_ImportRoomMenuItemActionPerformed

    private void ImportUsersMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ImportUsersMenuItemActionPerformed
         // TODO add your handling code here:          
        JFileChooser jf = new JFileChooser();
        jf.setDialogTitle("Please select Users File to import");
        int result = jf.showOpenDialog(null);
        if(result == JFileChooser.APPROVE_OPTION){
            String filePath = jf.getSelectedFile().getAbsolutePath();         
            
            try{
                FileInputStream fis = new FileInputStream(filePath);
                Workbook workbook = new XSSFWorkbook(fis);
                Sheet firstSheet = workbook.getSheetAt(0);
                Iterator<Row> iterator = firstSheet.iterator();
                List<UserBean> userBeansList = new ArrayList<UserBean>();
                
                while (iterator.hasNext()) {
        Row nextRow = iterator.next();
        if(nextRow.getRowNum() != 0){
        Iterator<Cell> cellIterator = nextRow.cellIterator();
                    UserBean userBean = new UserBean();
 
        while (cellIterator.hasNext()) {
            Cell nextCell = cellIterator.next();
            int columnIndex = nextCell.getColumnIndex();
 
            switch (columnIndex) {
            case 0:
                userBean.setLoginId(getCellValue(nextCell).toString());
                break;
            case 1:
                userBean.setPassword((String) getCellValue(nextCell));
                break;
            case 2:
                userBean.setRole((String) getCellValue(nextCell));
                break;
            
            }
 
 
        }
        userBeansList.add(userBean);
    }
 
    
                }    
    workbook.close();
    fis.close();
    
    mainPanel.removeAll();
    mainPanel.repaint();   
            UserModel model = new UserModel();
             for(UserBean userBean :userBeansList){
                try{
                model.registerUser(userBean);
                }catch(Exception exp){
                    System.out.println("Exception Raised....."+exp.getMessage());
                }
            }            
         CommonImportFrame commonFrame = new CommonImportFrame();
         commonFrame.setTitle("Users Import Frame");
         commonFrame.getLblImportMsg().setText("Users Data Imported Successfully");
         commonFrame.loadUsersDataIntoJTable();
         mainPanel.add(commonFrame);
         commonFrame.setVisible(true);
         
            }catch(Exception exp){
                JOptionPane.showMessageDialog(null, exp.getMessage());
            }          
            
        }
    }//GEN-LAST:event_ImportUsersMenuItemActionPerformed

    private void maintanSchoolActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_maintanSchoolActionPerformed
        // TODO add your handling code here:
         try{
            mainPanel.removeAll();
            mainPanel.repaint();                    
            GradSchoolFrame schoolFrame = new GradSchoolFrame();
            schoolFrame.getSchoolMsgLabel().setText("");
            schoolFrame.loadDataIntoJTable();
            mainPanel.add(schoolFrame);
            schoolFrame.setVisible(true);
           
        }catch(Exception exp){
            JOptionPane.showMessageDialog(null, "Exception Raised "+exp);
        }
        
    }//GEN-LAST:event_maintanSchoolActionPerformed

    private void maintainFacultyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_maintainFacultyActionPerformed
        // TODO add your handling code here:
        
         try{
            mainPanel.removeAll();
            mainPanel.repaint();                    
            FacultyFrame facultyFrame = new FacultyFrame();
            facultyFrame.getFacultyMsgLabel().setText("");
            facultyFrame.loadDataIntoJTable();
            mainPanel.add(facultyFrame);
            facultyFrame.setVisible(true);
           
        }catch(Exception exp){
            JOptionPane.showMessageDialog(null, "Exception Raised "+exp);
        }
        
    }//GEN-LAST:event_maintainFacultyActionPerformed

    private void maintainCourseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_maintainCourseActionPerformed
        // TODO add your handling code here:
        try{
            mainPanel.removeAll();
            mainPanel.repaint();                    
            CourseFrame courseFrame = new CourseFrame();
            courseFrame.getCourseMsgLabel().setText("");
            courseFrame.loadDataIntoJTable();
            mainPanel.add(courseFrame);
            courseFrame.setVisible(true);
           
        }catch(Exception exp){
            JOptionPane.showMessageDialog(null, "Exception Raised "+exp);
        }
        
    }//GEN-LAST:event_maintainCourseActionPerformed

    private void maintainCourseSectionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_maintainCourseSectionActionPerformed
        // TODO add your handling code here:
        try{
            mainPanel.removeAll();
            mainPanel.repaint();                    
            CourseSectionFrame courseSectionFrame = new CourseSectionFrame();
            courseSectionFrame.getCourseSectionMsgLabel().setText("");
            courseSectionFrame.loadDataIntoJTable();
            mainPanel.add(courseSectionFrame);
            courseSectionFrame.setVisible(true);
           
        }catch(Exception exp){
            JOptionPane.showMessageDialog(null, "Exception Raised "+exp);
        }
    }//GEN-LAST:event_maintainCourseSectionActionPerformed

    private void maintainDegreePlanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_maintainDegreePlanActionPerformed
        // TODO add your handling code here:
        
         try{
            mainPanel.removeAll();
            mainPanel.repaint();                    
            DegreeFrame degreeFrame = new DegreeFrame();
          //  degreeFrame.getDegreeMsgLabel().setText("");
            degreeFrame.loadDataIntoJTable();
            mainPanel.add(degreeFrame);
            degreeFrame.setVisible(true);
           
        }catch(Exception exp){
            JOptionPane.showMessageDialog(null, "Exception Raised "+exp);
        }
    }//GEN-LAST:event_maintainDegreePlanActionPerformed

    private void maintainStudentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_maintainStudentActionPerformed
         // TODO add your handling code here:
        
         try{
            mainPanel.removeAll();
            mainPanel.repaint();                    
            StudentFrame studentFrame = new StudentFrame();
            studentFrame.getStudentMsgLabel().setText("");
            studentFrame.loadDataIntoJTable();
            mainPanel.add(studentFrame);
            studentFrame.setVisible(true);
           
        }catch(Exception exp){
            JOptionPane.showMessageDialog(null, "Exception Raised "+exp);
        }
    }//GEN-LAST:event_maintainStudentActionPerformed

    private void maintainStudentCourseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_maintainStudentCourseActionPerformed
        // TODO add your handling code here:
        
         try{
            mainPanel.removeAll();
            mainPanel.repaint();                    
            StudentCourseFrame studentFrame = new StudentCourseFrame();
            studentFrame.getStudentMsgLabel().setText("");
            studentFrame.loadDataIntoJTable();
            mainPanel.add(studentFrame);
            studentFrame.setVisible(true);
           
        }catch(Exception exp){
            JOptionPane.showMessageDialog(null, "Exception Raised "+exp);
        }
        
    }//GEN-LAST:event_maintainStudentCourseActionPerformed

    private void maintainSemesterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_maintainSemesterActionPerformed
         // TODO add your handling code here:
        
         try{
            mainPanel.removeAll();
            mainPanel.repaint();                    
            SemesterFrame semesterFrame = new SemesterFrame();
            semesterFrame.getSemesterMsgLabel().setText("");
            semesterFrame.loadDataIntoJTable();
            mainPanel.add(semesterFrame);
            semesterFrame.setVisible(true);
           
        }catch(Exception exp){
            JOptionPane.showMessageDialog(null, "Exception Raised "+exp);
        }
        
    }//GEN-LAST:event_maintainSemesterActionPerformed

    private void MaintainRoomsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MaintainRoomsActionPerformed
        // TODO add your handling code here:
        
        try{
            mainPanel.removeAll();
            mainPanel.repaint();                    
            RoomFrame roomFrame = new RoomFrame();
            roomFrame.loadDataIntoJTable();
            roomFrame.getRoomMsgLabel().setText("");                      
            mainPanel.add(roomFrame);
            roomFrame.setVisible(true);
           
        }catch(Exception exp){
            JOptionPane.showMessageDialog(null, "Exception Raised "+exp);
        }
    }//GEN-LAST:event_MaintainRoomsActionPerformed

    private void MaintainUsersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MaintainUsersActionPerformed
        // TODO add your handling code here:
        try{
            mainPanel.removeAll();
            mainPanel.repaint();                    
            UserFrame userFrame = new UserFrame();
            userFrame.loadDataIntoJTable();            
            userFrame.getUsersMsgLabel().setText("");       
            mainPanel.add(userFrame);
            userFrame.setVisible(true);
           
        }catch(Exception exp){
            JOptionPane.showMessageDialog(null, "Exception Raised "+exp);
        }
    }//GEN-LAST:event_MaintainUsersActionPerformed

    private void GenerateScheduleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GenerateScheduleActionPerformed
  // TODO add your handling code here:
         try{
            mainPanel.removeAll();
            mainPanel.repaint();                    
            GenerateScheduleFrame sheduleFrame = new GenerateScheduleFrame();
            sheduleFrame.loadDataIntoJTable();
            mainPanel.add(sheduleFrame);
            sheduleFrame.setVisible(true);
           
        }catch(Exception exp){
            JOptionPane.showMessageDialog(null, "Exception Raised "+exp);
        }
        
    }//GEN-LAST:event_GenerateScheduleActionPerformed

    private void TestScheduleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TestScheduleActionPerformed
  // TODO add your handling code here:
        try{
            mainPanel.removeAll();
            mainPanel.repaint();                    
            TestScheduleFrame sheduleFrame = new TestScheduleFrame();
            mainPanel.add(sheduleFrame);
            sheduleFrame.setVisible(true);
           
        }catch(Exception exp){
            JOptionPane.showMessageDialog(null, "Exception Raised "+exp);
        }
    }//GEN-LAST:event_TestScheduleActionPerformed

    private void ScheduleReportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ScheduleReportActionPerformed
               // TODO add your handling code here:
        
         try{
            mainPanel.removeAll();
            mainPanel.repaint();                    
            ScheduleReportFrame sheduleReportFrame = new ScheduleReportFrame();
            sheduleReportFrame.loadDataIntoJTable();
            mainPanel.add(sheduleReportFrame);
            sheduleReportFrame.setVisible(true);
           
        }catch(Exception exp){
            JOptionPane.showMessageDialog(null, "Exception Raised "+exp);
        }
    }//GEN-LAST:event_ScheduleReportActionPerformed

    private void StudentsReportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_StudentsReportActionPerformed
       // TODO add your handling code here:
        try{
            mainPanel.removeAll();
            mainPanel.repaint();                    
            StudentReportFrame studentReportFrame = new StudentReportFrame();
            studentReportFrame.loadDataIntoJTable();
            mainPanel.add(studentReportFrame);
            studentReportFrame.setVisible(true);
           
        }catch(Exception exp){
            JOptionPane.showMessageDialog(null, "Exception Raised "+exp);
        }
    }//GEN-LAST:event_StudentsReportActionPerformed

    private void LogOutMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_LogOutMouseClicked
        // TODO add your handling code here:
        this.dispose();
        new LoginFrame().setVisible(true);
    }//GEN-LAST:event_LogOutMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }

    private Object getCellValue(Cell cell) {
    switch (cell.getCellType()) {
    case Cell.CELL_TYPE_STRING:
        return cell.getStringCellValue();
 
    case Cell.CELL_TYPE_BOOLEAN:
        return cell.getBooleanCellValue();
        
    case Cell.CELL_TYPE_NUMERIC:  
        DataFormatter df = new DataFormatter();
        String stringCellValue = df.formatCellValue(cell);
        return stringCellValue;
    }
 
    return null;
}
   

    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem GenerateSchedule;
    private javax.swing.JCheckBoxMenuItem ImportRoomMenuItem;
    private javax.swing.JCheckBoxMenuItem ImportUsersMenuItem;
    private javax.swing.JMenu LogOut;
    private javax.swing.JCheckBoxMenuItem MaintainRooms;
    private javax.swing.JCheckBoxMenuItem MaintainUsers;
    private javax.swing.JMenu MaintanData;
    private javax.swing.JMenu ReportsMenu;
    private javax.swing.JMenu ScheduleMenu;
    private javax.swing.JMenuItem ScheduleReport;
    private javax.swing.JCheckBoxMenuItem StudentsReport;
    private javax.swing.JCheckBoxMenuItem TestSchedule;
    private javax.swing.JCheckBoxMenuItem facultyImportMenuItem;
    private javax.swing.JCheckBoxMenuItem importCourseMenuItem;
    private javax.swing.JMenu importData;
    private javax.swing.JCheckBoxMenuItem importDegreePlanMenuItem;
    private javax.swing.JMenuItem importSchoolData;
    private javax.swing.JCheckBoxMenuItem importSemesterMenuItem;
    private javax.swing.JCheckBoxMenuItem importStudentCourseMenuItem;
    private javax.swing.JCheckBoxMenuItem importStudentMenuItem;
    private javax.swing.JCheckBoxMenuItem importcourseSectionMenuItem;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JDesktopPane mainPanel;
    private javax.swing.JCheckBoxMenuItem maintainCourse;
    private javax.swing.JCheckBoxMenuItem maintainCourseSection;
    private javax.swing.JCheckBoxMenuItem maintainDegreePlan;
    private javax.swing.JCheckBoxMenuItem maintainFaculty;
    private javax.swing.JCheckBoxMenuItem maintainSemester;
    private javax.swing.JCheckBoxMenuItem maintainStudent;
    private javax.swing.JCheckBoxMenuItem maintainStudentCourse;
    private javax.swing.JMenuItem maintanSchool;
    // End of variables declaration//GEN-END:variables
}
